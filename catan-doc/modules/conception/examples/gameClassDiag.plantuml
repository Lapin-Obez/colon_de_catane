@startuml

enum Resource {
    Bois
    Argile
    Laine
    Bl√©
    Minerai
}

enum Color {
    Bleu
    Blanc
    Orange
    Rouge
}

enum ExchangeRate {
    4:1
    3:1
    2:1
}

enum Development {
    PointsDeVictoire
    Chevalier
    Monopole
    Invention
    ConstructionDeRoutes
}

enum SpecialCard {
    RoutePlusLongue
    ArmeePlusPuissante
}

enum GameStatus {
    SetUp
    ResourceProduction
    Robber
    TradeAndBuild
    GameStop
}

class Game {
    - Map<Integer, Development> deckDevelopment
    - Map<Integer, Resource> deckResource
    - List<Player> listOfPlayers
    - Player winner
    - Board board
    - GameStatus status

    + void calculateStrongestArmy()
    + void calculateLongestRoad()
    + List<Player> playStealer(Tile tile)
    + void monopoly(Player player, Resource resource)
    + void invention(Player player)
    + void buildColony(Player player, int intersectionID) throws GameStatusException, IllegalArgumentException, ImpossibleBuildException, NotEnoughResourcesException
    + void buildCity(Player player, int intersectionID) throws GameStatusException, IllegalArgumentException, ImpossibleBuildException, NotEnoughResourcesException
    + void buildRoad(Player player, int intersectionA, int intersectionB) throws GameStatusException, IllegalArgumentException, ImpossibleBuildException, NotEnoughResourcesException
    - void evaluateEndGame()
    + Player endGameTurn(Player playerAct) throws GameStatusException
    + boolean isGameOver()
    + Player getWinner() throws GameStatusException
    + int throwDice(Player playerAct) throws GameStatusException
    + List<Player> playStealer(Player playerAct, int tileID) throws GameStatusException, IllegalArgumentException
    + void stealResources(Player stealer, Player victim) throws GameStatusException, NotEnoughResourcesException
    + void maritimeTrade(Player player, Resource rDefausse, Resource rRecup)
}

class Board {
    - final Integer NBINTERSECTIONS
    - int idSealerTile
    - Map<Integer, Map<Integer, Color>> roads
    - Map<Integer, Intersection> intersections
    - Map<Integer, Tile> tiles

    + BoardImpl()
    - TilesConstructor()
    - Tile TileGenerator(Integer id, Integer intersection, Resource resource, int tokenValue)
    + int getRoadLength(Color color)
    + void moveStealer(int tileID)
    + List<Player> playStealer(int tileID) throws IllegalArgumentException
    +Optional<Harbor> buildColony(Color color, int idIntersection) throws IllegalArgumentException, ImpossibleBuildException
    + void buildCity(Color color, int idIntersection) throws IllegalArgumentException, ImpossibleBuildException
    + void buildRoad(Color color, int intersectionA, int intersectionB) throws IllegalArgumentException, ImpossibleBuildException
    Map<Color, Map<Resource,Integer>> distributeResources(int tokenValue) throws IllegalArgumentException
    + void distributeResources(int tokenValue)
}

class Harbor{
    - ExchangeRate rate
    - Resource resource {@Nullable}

    + Optional<Resource> getResource()
}

class Tile{
    - final List<Intersection> listIntersections
    - final Resource resource {@Nullable}
    - final int tokenValue

    + TileImpl(List<Intersection> listIntersections, Resource resource, int tokenValue)
    + Resource getResource()
    + Map<Color, Map<Resource, Integer>> distributeResources()
    + int getTokenValue()
}

class Intersection{
    - Construction construction {@Nullable}
    - Harbor harbor {@Nullable}

    + void setConstruction(Construction construction)
    + void setPort(Harbor harbor)
    + Construction getConstruction()
    + Optional<Harbor> getHarbor()
}

class Player{
    - Color color
    - Map<int, Resource> mainResource
    - Map<int, Development> mainDevelopment
    - int numberOfKnight
    - List<SpecialCard> specialCards

    + void maritimeTrade(Resource rDefausse, Resource rRecup)
    + void addHarbor(Harbor harbor)
    + int getVictoryPoints()
    + int getNumberOfKnight()
    + void playKnight()
    + void grantSpecialCard(SpecialCard card)
    + void removeSpecialCard(SpecialCard card)
    + void addDevelopmentCard(Development card)
    + Resource getRandomResources() throws NotEnoughResourcesException
    + void deleteHalfResources()
    + int deleteResource(Resource resource)
    + Color getColor()
    + int getNumberOfResources(Resource resource)
    + void deleteResources(Resource resource, int amount) throws NotEnoughResourcesException
}

interface Construction {
    + Color getColor()
    + int getPower()
}

class City {
    - Color color
    - int power

    + City(Color color)
    + Color getColor()
    + int getPower()
}

class Colony {
    - Color color
    - int power

    + Colony(Color color)
    + Color getColor()
    + int getPower()
}



Construction <-d- City
Construction <-d- Colony


Game *--> "1" Board
Board *--> "19" Tile
Board *--> "54" Intersection

Tile "2:3" *-->"6" Intersection
Intersection *--> "0:1" Construction

Intersection *--> "0.1" Harbor

Game --> "3:4" Player
Player "1" -- "0:n" Construction

@enduml
