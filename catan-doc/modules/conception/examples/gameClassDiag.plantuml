@startuml
enum Resource {
    Bois
    Argile
    Laine
    Bl√©
    Minerai
}

enum Color {
    Bleu
    Blanc
    Orange
    Rouge
}

enum ExchangeRate {
    4:1
    3:1
    2:1
}

enum Development {
    PointsDeVictoire
    Chevalier
    Monopole
    Invention
    ConstructionDeRoutes
}

enum SpecialCard {
    RoutePlusLongue
    ArmeePlusPuissante
}

enum GameStatus {
    SetUp
    ResourceProduction
    Robber
    TradeAndBuild
    GameStop
}

interface Game {
    + List<Player> playStealer(Tile tile)
    + buildColony(Player player, int intersectionID) throws GameStatusException, IllegalArgumentException, ImpossibleBuildException, NotEnoughResourcesException
    + buildCity(Player player, int intersectionID) throws GameStatusException, IllegalArgumentException, ImpossibleBuildException, NotEnoughResourcesException
    + buildRoad(Player player, int intersectionA, int intersectionB) throws GameStatusException, IllegalArgumentException, ImpossibleBuildException, NotEnoughResourcesException
    + Player endGameTurn(Player playerAct) throws GameStatusException
    + boolean isGameOver()
    + Player getWinner() throws GameStatusException
    + int throwDice(Player playerAct) throws GameStatusException
    + List<Player> playStealer(Player playerAct, int tileID) throws GameStatusException, IllegalArgumentException
    + stealResources(Player stealer, Player victim) throws GameStatusException, NotEnoughResourcesException
    + maritimeTrade(Player player, Resource rDefausse, Resource rRecup) throws GameStatusException, NotEnoughResourcesException
    + drawDevelopmentCard(Player player) throws GameStatusException, NotEnoughResourcesException
    + monopoly(Player player, Resource resource) throws GameStatusException, NotEnoughDevelopmentCardException
    + yearOfPlenty(Player player, Resource resource1, Resource resource2) throws GameStatusException, NotEnoughDevelopmentCardException
    + roadBuildingCard(Player player) throws GameStatusException, NotEnoughDevelopmentCardException
    + knightCard(Player player) throws GameStatusException, NotEnoughDevelopmentCardException
}

class GameImpl {
    - Map<Development, Integer> deckDevelopment
    - GameStatus status

    + GameImpl(Integer playerNumber)
    - calculateLongestRoad()
    - calculateStrongestArmy()
    - evaluateEndGame()
}

interface Board {
    + int getRoadLength(Color color)
    + List<Player> playStealer(int tileID) throws IllegalArgumentException
    + Optional<Harbor> buildColony(Color color, int idIntersection) throws IllegalArgumentException, ImpossibleBuildException
    + buildCity(Color color, int idIntersection) throws IllegalArgumentException, ImpossibleBuildException
    + buildRoad(Color color, int intersectionA, int intersectionB) throws IllegalArgumentException, ImpossibleBuildException
    Map<Color, Map<Resource,Integer>> distributeResources(int tokenValue) throws IllegalArgumentException
    + distributeResources(int tokenValue)
}

class BoardImpl {
    - final Integer NBINTERSECTIONS
    - int idSealerTile
    - Map<Integer, Map<Integer, Color>> roads

    + BoardImpl()
    - tilesConstructor()
    - Tile tileGenerator(Integer id, Integer intersection, Resource resource, int tokenValue)
    - addHarbour()
    - createTokenValue()
    - boardRessources()
    - roadConstructor()
    - buildIntersectionLine(Integer begin, Integer end,Integer isodd,Integer increase,Integer decrease)
}

class Harbor{
    - ExchangeRate rate
    - Resource resource {@Nullable}

    + Optional<Resource> getResource()
}

class Tile{
    - final List<Intersection> listIntersections
    - final Resource resource {@Nullable}
    - final int tokenValue

    + TileImpl(List<Intersection> listIntersections, Resource resource, int tokenValue)
    + Resource getResource()
    + Map<Color, Map<Resource, Integer>> distributeResources()
    + int getTokenValue()
}

class Intersection{
    - Construction construction {@Nullable}
    - Harbor harbor {@Nullable}

    + setConstruction(Construction construction)
    + setPort(Harbor harbor)
    + Construction getConstruction()
    + Optional<Harbor> getHarbor()
}

interface Player {
    + maritimeTrade(Resource rDefausse, Resource rRecup)
    + addHarbor(Harbor harbor)
    + int getVictoryPoints()
    + int getNumberOfKnight()
    + playKnight()
    + grantSpecialCard(SpecialCard card)
    + removeSpecialCard(SpecialCard card)
    + addDevelopmentCard(Development card)
    + Resource getRandomResources() throws NotEnoughResourcesException
    + deleteHalfResources()
    + Color getColor()
    + int getNumberOfResources(Resource resource)
    + deleteResources(Resource resource, int amount) throws NotEnoughResourcesException
    + List<SpecialCard> getSpecialCards()
    + incrConstructionPoints()
}

class PlayerImpl {
    - Color color
    - Map<Resource,Integer> mainResource
    - Map<Development,Integer> mainDevelopment
    - int numberOfKnight
    - int constructionPoints
    - List<SpecialCard> specialCards

    + PlayerImpl(Color color)
    + PlayerImpl()
}

interface Construction {
    + Color getColor()
    + int getPower()
}

class City {
    - Color color
    - int power

    + City(Color color)
}

class Colony {
    - Color color
    - int power

    + Colony(Color color)
}

class BoardImpl implements Board
class GameImpl implements Game
class PlayerImpl implements Player

class City implements Construction
class Colony implements Construction

GameImpl *--> "1" Board : - board
BoardImpl *--> "19" Tile : - Map<Integer, Tile> tiles
BoardImpl *--> "54" Intersection : - Map<Integer, Intersection> intersections

Tile "2:3" *-->"6" Intersection
Intersection *--> "0:1"

Intersection *--> "0.1" Harbor

GameImpl --> "3:4" Player : - List<Player> playerList
GameImpl --> "1" Player : - actualPlayer

PlayerImpl --> "5" Harbor : - Map<Resource, Harbor> harbors
@enduml
